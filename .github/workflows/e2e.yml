name: e2e

on:
  issue_comment:
    types: [created]

env:
  REGISTRY: 'ghcr.io/dell/csi-baremetal'
  go_version: '1.16.8'
  golangci_version: '1.37.0'
  helm_version: '3.7.1'
  kubectl_version: 'v1.22.2'
  kind_config: 'small-kind.yaml'
  kind_image: 'v1.19.11'
  kind_wait: '30s'
jobs:
  e2e:
    runs-on: ubuntu-20.04
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/ci')
    steps:
    - name: Get operator branch 
      uses: actions/github-script@v5
      id: set-branch
      with:
        result-encoding: string
        script: |
          var branch = `${{ github.event.comment.body }}`.split(String.fromCharCode(0x0A))[1].replaceAll(" ", "")
          var key = "operator_branch="
          return branch.search(key) !== -1 ? branch.split(key)[1] : ``

    - name: Check out code
      uses: actions/checkout@v2
      
    - name: Add csi-baremetal-operator
      uses: actions/checkout@v2
      with:
        repository: dell/csi-baremetal-operator 
        path: ./csi-baremetal-operator 
        ref: '${{steps.set-branch.outputs.result}}'

    - name: Send start message
      uses: actions-ecosystem/action-create-comment@v1
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            body: |
              @${{ github.actor }}, start CI. 
              Parameters: operator_branch='${{steps.set-branch.outputs.result}}'
      
    - name: Set environment variables
      run: |
        echo "CSI_BAREMETAL_DIR=$RUNNER_WORKSPACE/csi-baremetal/" >> $GITHUB_ENV
        echo "CSI_BAREMETAL_OPERATOR_DIR=$RUNNER_WORKSPACE/csi-baremetal/csi-baremetal-operator/" >> $GITHUB_ENV

    - name: LVM2 install
      run: sudo apt-get install -y lvm2

    - name: Prepare Golang 
      uses: actions/setup-go@v2
      with:
        go-version: ${{env.go_version}}

    - name: Install helm
      uses: azure/setup-helm@v1
      with:
        version: ${{env.helm_version}}
          
    - name: Kubectl install
      uses: azure/setup-kubectl@v1
      with:
        version: ${{env.kubectl_version}} 

    - name: add CSI_VERSION
      run: |
        cd ${{env.CSI_BAREMETAL_DIR}}
        echo "CSI_VERSION=`make version`" >> $GITHUB_ENV

    - name: Get dependencies
      run: make dependency

    - name: Generate CRD
      run: |
        make install-controller-gen 
        make generate-deepcopy

    - name: Build binary
      run: |
        make build
        make DRIVE_MANAGER_TYPE=loopbackmgr build-drivemgr

    - name: Download health-probe
      run: make download-grpc-health-probe

    - name: Build docker images
      run: |
        make images REGISTRY=${{ env.REGISTRY }}
        make DRIVE_MANAGER_TYPE=loopbackmgr image-drivemgr REGISTRY=${{ env.REGISTRY }}
    
    - name: docker-build operators 
      run: |
        cd ${{env.CSI_BAREMETAL_OPERATOR_DIR}}
        echo "CSI_OPERATOR_VERSION=`make version`" >> $GITHUB_ENV
        make docker-build REGISTRY=${{ env.REGISTRY }}

    - name: Kind preparation
      run: |
        cd ${{env.CSI_BAREMETAL_DIR}}
        make kind-build KIND_VER=0.11.1
        make kind-create-cluster KIND_CONFIG=${{env.kind_config}} KIND_IMAGE_VERSION=${{env.kind_image}} KIND_WAIT=${{env.kind_wait}}
        kubectl cluster-info --context kind-kind
        kubectl get pods -o wide --all-namespaces 
        echo "current-context:" $(kubectl config current-context)
        echo "environment-kubeconfig:" ${KUBECONFIG}
      
    - name: Sidecars preparing
      run: |
        make deps-docker-pull
        make deps-docker-tag

    - name: Retag CSI images and load them to kind
      run: |
        docker images 
        make kind-tag-images TAG=$CSI_VERSION REGISTRY=${{ env.REGISTRY }}
        make kind-load-images TAG=$CSI_VERSION REGISTRY=${{ env.REGISTRY }}
        make kind-tag-operator-image OPERATOR_VERSION=$CSI_OPERATOR_VERSION REGISTRY=${{ env.REGISTRY }}
        make kind-load-operator-image OPERATOR_VERSION=$CSI_OPERATOR_VERSION
          
    - name: Make test
      run: make test-short-ci CSI_VERSION=$CSI_VERSION OPERATOR_VERSION=$CSI_OPERATOR_VERSION CHARTS_DIR=${{env.CSI_BAREMETAL_OPERATOR_DIR}}charts

    - name: Upload report to artifacts
      uses: actions/upload-artifact@v2.2.1
      with:
        name: report.xml
        path: test/e2e/report.xml
    
    - name: Upload log to artifacts
      uses: actions/upload-artifact@v2.2.1
      with:
        name: log.txt
        path: log.txt

  fail:
    needs: e2e
    if: always() && needs.e2e.result == 'failure' 
    runs-on: ubuntu-20.04
    steps:
      - name: answer
        uses: actions-ecosystem/action-create-comment@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            @${{ github.actor }}, some tests fell

  success: 
      needs: e2e
      if: always() && needs.e2e.result == 'success'
      runs-on: ubuntu-20.04
      steps:
        - name: answer
          uses: actions-ecosystem/action-create-comment@v1
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            body: |
              @${{ github.actor }}, success.      

